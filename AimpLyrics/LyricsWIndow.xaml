<Window x:Class="AimpLyrics.LyricsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:themes="clr-namespace:AimpLyrics.Themes"
        xmlns:vm="clr-namespace:AimpLyrics.ViewModels"
        MinWidth="280"
        MinHeight="120"
        d:DataContext="{d:DesignInstance Type=vm:SettingsViewModel}"
        Icon="Resources/aimpLogo.png"
        SizeToContent="Width"
        WindowStyle="None"
        mc:Ignorable="d"
        Background="{DynamicResource BackgroundColorBrush}"
        Foreground="{DynamicResource ForegroundColorBrush}">
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="0" ResizeBorderThickness="5"/>
    </WindowChrome.WindowChrome>
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/Dark.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <ObjectDataProvider x:Key="Themes"
                                MethodName="GetValues"
                                ObjectType="{x:Type system:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="themes:Theme"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Color x:Key="OrangeColor">#FFDC8628</Color>
            <Color x:Key="LightOrangeColor">#FFFFD09F</Color>

            <SolidColorBrush x:Key="WhiteColorBrush" Color="{DynamicResource White}"/>
            <SolidColorBrush x:Key="WindowTitleButtonBackgroundColorBrush" Color="{DynamicResource Gray15}"/>
            <SolidColorBrush x:Key="BackgroundColorBrush" Color="{DynamicResource Gray30}"/>
            <SolidColorBrush x:Key="InputBackgroundColorBrush" Color="{DynamicResource Gray3C}"/>
            <SolidColorBrush x:Key="ButtonForegroundColorBrush" Color="{DynamicResource Gray9D}"/>
            <SolidColorBrush x:Key="ForegroundColorBrush" Color="{DynamicResource GrayB7}"/>
            <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource OrangeColor}"/>

            <Style TargetType="TextBox">
                <Setter Property="Background" Value="{StaticResource InputBackgroundColorBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundColorBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Margin" Value="3,3,3,0"/>
                <Setter Property="Padding" Value="3"/>
            </Style>
            <Style x:Key="ChangeColorTextBoxStyle"
                   BasedOn="{StaticResource {x:Type TextBox}}"
                   TargetType="TextBox">
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource WhiteColorBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="ComboBoxItem">
                <Setter Property="Background" Value="{StaticResource BackgroundColorBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteColorBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <ControlTemplate x:Key="ButtonBaseControlTemplate" TargetType="{x:Type ButtonBase}">
                <Border BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                    <ContentPresenter x:Name="contentPresenter"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Content="{TemplateBinding Content}"
                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      Focusable="False"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource WhiteColorBrush}"/>
                        <Setter Property="Background" Value="{StaticResource InputBackgroundColorBrush}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{StaticResource AccentColorBrush}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource ButtonForegroundColorBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                <Setter Property="Template" Value="{StaticResource ButtonBaseControlTemplate}"/>
            </Style>
            <Style TargetType="ListBoxItem">
                <Setter Property="Background" Value="{StaticResource InputBackgroundColorBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="10,3"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource AccentColorBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <Grid MaxHeight="26" DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0"
                        MouseDown="OnTitleBarMouseDown"
                        Orientation="Horizontal"
                        Background="Transparent">
                <Image Margin="5,5,5,2"
                       RenderOptions.BitmapScalingMode="HighQuality"
                       Source="Resources/aimpLogo.png"/>
                <TextBlock Name="WindowTitle"
                           VerticalAlignment="Center"
                           Text="[Lyrics]"
                           ToolTip="{Binding Text, ElementName=WindowTitle}"
                           Foreground="{StaticResource AccentColorBrush}"/>
            </StackPanel>
            <Button Name="SelectThemeButton"
                    Grid.Column="1"
                    Click="OnSelectThemeButtonClick"
                    Content="Theme">
                <Button.Style>
                    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsOpen, ElementName=ThemesPopup}" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource WhiteColorBrush}"/>
                                <Setter Property="Background" Value="{StaticResource AccentColorBrush}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Popup x:Name="ThemesPopup"
                   AllowsTransparency="True"
                   PlacementTarget="{Binding ElementName=SelectThemeButton}"
                   PopupAnimation="Slide"
                   StaysOpen="False">
                <ListBox x:Name="ThemesListBox"
                         Margin="10"
                         BorderBrush="{StaticResource BackgroundColorBrush}"
                         ItemsSource="{Binding Source={StaticResource Themes}}"
                         SelectedItem="{Binding Theme}"
                         SelectionChanged="OnThemesSelectionChanged"
                         Background="{StaticResource InputBackgroundColorBrush}"
                         Foreground="{StaticResource WhiteColorBrush}">
                    <ListBox.Effect>
                        <DropShadowEffect/>
                    </ListBox.Effect>
                </ListBox>
            </Popup>
            <StackPanel Grid.Column="2"
                        Orientation="Horizontal"
                        Background="{StaticResource WindowTitleButtonBackgroundColorBrush}">
                <Button MinWidth="30" Click="OnMinimizeButtonClick">
                    <Path Data="M0,0L10,0 10,1 10,1 1,1 0,1z" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Path.RenderTransform>
                            <TranslateTransform Y="-1"/>
                        </Path.RenderTransform>
                    </Path>
                </Button>
                <!--<Button Click="OnMaximizeButtonClick">
                    <Path x:Name="MaxButtonPath"
                          Data="M1,1L1,11 11,11 11,1z M0,0L12,0 12,12 0,12z"
                          Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                </Button>-->
                <Button MinWidth="30" Click="OnCloseButtonClick">
                    <Button.Style>
                        <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                            <Setter Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
                        </Style>
                    </Button.Style>
                    <Path Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z" Stroke="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Path.RenderTransform>
                            <TranslateTransform X="-0.8" Y="-1"/>
                        </Path.RenderTransform>
                    </Path>
                </Button>
            </StackPanel>
        </Grid>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBox Name="SearchTerm"
                         Grid.Column="0"
                         VerticalContentAlignment="Center"
                         Style="{StaticResource ChangeColorTextBoxStyle}"
                         ToolTip="Search Term"/>
                <Button Grid.Column="1"
                        Margin="0,3,3,0"
                        Click="OnSearchButtonClick"
                        Content="Search"
                        IsDefault="True"
                        ToolTip="Search lyrics in Google"/>
            </Grid>
            <TextBox Name="Lyrics"
                     Grid.Row="1"
                     AcceptsReturn="True"
                     FontSize="{Binding LyricsFontSize}"
                     TextWrapping="Wrap"
                     VerticalScrollBarVisibility="Auto"/>
            <DockPanel Grid.Row="2"
                       Margin="3"
                       LastChildFill="False">
                <Button Click="SaveLyrics"
                        Content="Save As"
                        DockPanel.Dock="Left"/>
                <TextBox MinWidth="20"
                         Margin="0"
                         VerticalAlignment="Center"
                         DockPanel.Dock="Right"
                         Style="{StaticResource ChangeColorTextBoxStyle}"
                         Text="{Binding LyricsFontSize, Delay=300, UpdateSourceTrigger=PropertyChanged}"
                         ToolTip="Font Size"/>
            </DockPanel>
        </Grid>
    </DockPanel>
</Window>
